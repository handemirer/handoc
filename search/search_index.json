{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Han Doc","text":""},{"location":"Android/SharedPrefHelpers/","title":"SharedPrefHelpers.kt","text":"<pre><code>import android.content.Context\nimport androidx.annotation.NonNull\n\nobject SharedPrefHelpers {\n    fun readFromSharedPreferences(context: Context, key: String, @NonNull defaultValue: String): String? {\n        return context.getSharedPreferences(\"pref\", Context.MODE_PRIVATE).getString(key, defaultValue)\n    }\n\n    fun writeToSharedPreferences(context: Context, key: String, @NonNull value: String) {\n        val sharedPreferences = context.getSharedPreferences(\"pref\", Context.MODE_PRIVATE)\n        val editor = sharedPreferences.edit()\n        editor.putString(key, value)\n        editor.apply()\n    }\n}\n</code></pre>"},{"location":"Android/android_recycle_view_template/","title":"RecyclerView Template","text":"<pre><code>#if (${PACKAGE_NAME} &amp;&amp; ${PACKAGE_NAME} != \"\")package ${PACKAGE_NAME};#end\n\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.recyclerview.widget.RecyclerView\n\n\nclass ${Name}(private val dataSet: ArrayList&lt;${Model}&gt;) :\n    RecyclerView.Adapter&lt;${Name}.ViewHolder&gt;() {\n\n    class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {\n        //val textView: TextView\n\n        init {\n            //textView = view.findViewBy(R.id.textView)\n        }\n    }\n\n    override fun onCreateViewHolder(viewGroup: ViewGroup, viewType: Int): ViewHolder {\n        //val view = LayoutInflater.from(viewGroup.context).inflate(R.layout.row_item_pack, viewGroup, false)\n\n        //return ViewHolder(view)\n    }\n\n    override fun onBindViewHolder(viewHolder: ViewHolder, position: Int) {\n        //viewHolder.textView.text = dataSet[position].text\"\n\n    }\n\n    override fun getItemCount() = dataSet.size\n}\n</code></pre>"},{"location":"Android/auto_migration/","title":"Kotlin room db auto migration","text":"<p>Add this options</p> <p>build.gradle:app<pre><code>android {\n    defaultConfig {\n        javaCompileOptions {\n            annotationProcessorOptions {\n                arguments += [\"room.schemaLocation\": \"$projectDir/schemas\".toString()]\n            }\n        }\n    }\n}\n</code></pre> Database annotation <pre><code>@Database(entities = [...], \n    version = 4,\n    autoMigrations = [AutoMigration (from = 3, to = 4)]\n)\n</code></pre></p>"},{"location":"Android/background_task/","title":"Background Task","text":""},{"location":"Android/custom_dialog/","title":"Custom Dialog","text":"<pre><code>class CustomDialog(private val onDismiss: (Int) -&gt; Unit) : DialogFragment() {\n    private lateinit var binding: FragmentNumberPickerDialogBinding\n\n    override fun onCreateView(\n        inflater: LayoutInflater,\n        container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        binding = FragmentNumberPickerDialogBinding.inflate(inflater, container, false)\n        //onDismiss.invoke(target)\n        return binding.root\n    }\n\n\n    companion object {\n        const val TAG = \"CustomDialog\"\n    }\n}\n</code></pre>"},{"location":"Android/custom_view/","title":"Custom View","text":"<p>Life Cycle View </p> CustomView.kt<pre><code>package com.handemirer.customview\n\nimport android.content.Context\nimport android.graphics.Canvas\nimport android.graphics.Color\nimport android.graphics.Paint\nimport android.text.TextPaint\nimport android.util.AttributeSet\nimport android.view.View\n\nclass  CustomView @JvmOverloads constructor(\n    context: Context,\n    attrs: AttributeSet? = null,\n    defStyle: Int = 0\n) : View(context, attrs, defStyle)\n{\n\n    private var _exampleString: String? = null // TODO: use a default from R.string...\n    private var _exampleColor: Int = Color.RED // TODO: use a default from R.color...\n    private var _exampleDimension: Float = 0f // TODO: use a default from R.dimen...\n\n    private lateinit var textPaint: TextPaint\n    private var textWidth: Float = 0f\n    private var textHeight: Float = 0f\n\n    var exampleString: String?\n        get() = _exampleString\n        set(value) {\n            _exampleString = value\n            invalidateTextPaintAndMeasurements()\n        }\n\n    var exampleColor: Int\n        get() = _exampleColor\n        set(value) {\n            _exampleColor = value\n            invalidateTextPaintAndMeasurements()\n        }\n\n    var exampleDimension: Float\n        get() = _exampleDimension\n        set(value) {\n            _exampleDimension = value\n            invalidateTextPaintAndMeasurements()\n        }\n\n    init {\n        init(attrs,defStyle)\n    }\n\n    private fun init(attrs: AttributeSet?, defStyle: Int) {\n        val a = context.obtainStyledAttributes(\n            attrs, R.styleable.CustomView, defStyle, R.style.Widget_Theme_CustomView_MyView\n        )\n\n        _exampleString = a.getString(\n            R.styleable.CustomView_exampleString\n        )\n        _exampleColor = a.getColor(\n            R.styleable.CustomView_exampleColor,\n            exampleColor\n        )\n\n        _exampleDimension = a.getDimension(\n            R.styleable.CustomView_exampleDimension,\n            exampleDimension\n        )\n\n        a.recycle()\n\n        textPaint = TextPaint().apply {\n            flags = Paint.ANTI_ALIAS_FLAG\n            textAlign = Paint.Align.LEFT\n        }\n\n        invalidateTextPaintAndMeasurements()\n    }\n\n    private fun invalidateTextPaintAndMeasurements() {\n        textPaint.let {\n            it.textSize = exampleDimension\n            it.color = exampleColor\n            textWidth = it.measureText(exampleString)\n            textHeight = it.fontMetrics.bottom\n        }\n    }\n\n    override fun onDraw(canvas: Canvas) {\n        super.onDraw(canvas)\n\n        val paddingLeft = paddingLeft\n        val paddingTop = paddingTop\n        val paddingRight = paddingRight\n        val paddingBottom = paddingBottom\n\n        val contentWidth = width - paddingLeft - paddingRight\n        val contentHeight = height - paddingTop - paddingBottom\n\n        exampleString?.let {\n            canvas.drawText(\n                it,\n                paddingLeft + (contentWidth - textWidth) / 2,\n                paddingTop + (contentHeight + textHeight) / 2,\n                textPaint\n            )\n        }\n\n\n    }\n}\n</code></pre> attrs_custom_view.xml<pre><code>&lt;resources&gt;\n    &lt;declare-styleable name=\"CustomView\"&gt;\n        &lt;attr name=\"exampleString\" format=\"string\" /&gt;\n        &lt;attr name=\"exampleDimension\" format=\"dimension\" /&gt;\n        &lt;attr name=\"exampleColor\" format=\"color\" /&gt;\n    &lt;/declare-styleable&gt;\n&lt;/resources&gt;\n</code></pre> style.xml<pre><code>&lt;resources&gt;\n    &lt;style name=\"Widget.Theme.CustomView.MyView\" parent=\"\"&gt;\n        &lt;item name=\"android:background\"&gt;@color/gray_400&lt;/item&gt;\n        &lt;item name=\"exampleString\"&gt;abc&lt;/item&gt;\n        &lt;item name=\"exampleDimension\"&gt;24sp&lt;/item&gt;\n        &lt;item name=\"exampleColor\"&gt;?android:attr/textColorPrimary&lt;/item&gt;\n    &lt;/style&gt;\n&lt;/resources&gt;\n</code></pre>"},{"location":"Android/custom_view_group/","title":"Custom View Group","text":"<pre><code>package com.handemirer.customviewgroup\n\nimport android.content.Context\nimport android.util.AttributeSet\nimport android.view.LayoutInflater\nimport android.widget.LinearLayout\nimport android.widget.TextView\n\n\nclass CustomViewGroup @JvmOverloads constructor(\n    context: Context,\n    attrs: AttributeSet? = null,\n    defStyle: Int = 0,\n    defStyleRes: Int = 0\n) : LinearLayout(context, attrs, defStyle, defStyleRes) {\n    val titleTextView: TextView\n    val trailTextView: TextView\n\n    private var _title: String = \"\"\n    private var _trail: String = \"\"\n\n    var title: String\n        get() = _title\n        set(value) {\n            _title = value\n            titleTextView.text = value\n        }\n    var trail: String\n        get() = _trail\n        set(value) {\n            _trail = value\n            subtitleTextView.text = value\n        }\n\n    init {\n        LayoutInflater.from(context).inflate(R.layout.custom_linear_layout, this, true)\n\n        val a = context.obtainStyledAttributes(\n            attrs,\n            R.styleable.CustomViewGroup, 0, 0\n        )\n\n        trailTextView = findViewById&lt;TextView&gt;(R.id.trail)\n        titleTextView = findViewById&lt;TextView&gt;(R.id.title)\n        titleTextView.text = a.getString(R.styleable.CustomViewGroup_title)\n        trailTextView.text = a.getString(R.styleable.CustomViewGroup_trail)\n\n        a.recycle()\n    }\n}\n</code></pre> custom_linear_layout.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"horizontal\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"&gt;\n\n    &lt;TextView\n        android:id=\"@+id/title\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"TextView  \" /&gt;\n\n    &lt;TextView\n        android:id=\"@+id/trail\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"TextView\" /&gt;\n&lt;/LinearLayout&gt;\n</code></pre> attrs.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;resources&gt;\n    &lt;declare-styleable name=\"CustomViewGroup\"&gt;\n        &lt;attr name=\"title\" format=\"string\" /&gt;\n        &lt;attr name=\"trail\" format=\"string\" /&gt;\n    &lt;/declare-styleable&gt;\n&lt;/resources&gt;\n</code></pre>"},{"location":"Android/view_binding/","title":"View Binding","text":"<pre><code>class FlowModeFragment : Fragment() {\n    private lateinit var binding: FragmentFlowModeBinding\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        binding = FragmentFlowModeBinding.inflate(inflater, container, false)\n        return binding.root\n}\n</code></pre>"},{"location":"CSharp/Coravel/","title":"Coravel","text":"<pre><code>using Coravel;\n\nbuilder.Services.AddTransient&lt;DataBufferBackup&gt;(); \nbuilder.Services.AddScheduler();\napp.Services.UseScheduler(scheduler =&gt;\n{\n    scheduler.Schedule&lt;DataBufferBackup&gt;().EveryFiveMinutes();\n});\n</code></pre> <pre><code>public class DataBufferBackup : IInvocable\n{\n    public Task Invoke()\n    {\n        return Task.CompletedTask;\n    }\n}\n</code></pre>"},{"location":"CSharp/action_filter/","title":"ValidationFilterAttribue : ActionFilterAttribute","text":"<pre><code>public class ValidationFilterAttribue : ActionFilterAttribute\n{\n    public override void OnActionExecuting( ActionExecutingContext context)\n    {\n        var controller = context.RouteData.Values[\"controller\"];\n        var action = context.RouteData.Values[\"action\"];\n\n        //Dto\n        var param = context.ActionArguments.SingleOrDefault(\n            p =&gt; p.Value.ToString().Contains(\"Dto\")).Value;\n\n\n        if(param is null){\n            context.Result = new BadRequestObjectResult($\"Object is null.\"\n            + $\"Controller : {controller}\"\n            + $\"Action : {action}\"\n            );\n            return; //400\n        }\n\n        if(!context.ModelState.IsValid){\n            context.Result = new UnprocessableEntityObjectResult(context.ModelState); //422\n        }\n    }\n} \n</code></pre> <pre><code>builder.Services.AddScoped&lt;ValidationFilterAttribue&gt;()\n</code></pre> <pre><code>[ServiceFilter(typeof(ValidationFilterAttribue))]\n</code></pre>"},{"location":"CSharp/config/","title":"Configuration","text":"<pre><code>IConfiguration configuration = builder.Configuration;\nIWebHostEnvironment environment = builder.Environment;\n\nConnectionsUrl connectionsUrl = configuration.GetSection(\"PlatformSettings\").Get&lt;ConnectionsUrl&gt;();\nbuilder.Services.AddSingleton(connectionsUrl); \n</code></pre>"},{"location":"CSharp/cultureInfo/","title":"Culture Info","text":"<pre><code>using System.Globalization;\n\nCultureInfo.DefaultThreadCurrentCulture = CultureInfo.InvariantCulture;\nCultureInfo.DefaultThreadCurrentUICulture = CultureInfo.InvariantCulture;\n</code></pre>"},{"location":"CSharp/genericrepository/","title":"Generic Repository","text":"<p><pre><code>namespace EntityFramework.Entity\n{\n    public interface IEntity\n    {\n        public Guid Id { get; set; }\n        public DateTime CreateAt { get; set; } \n    }\n}\n</code></pre> <pre><code> namespace EntityFramework.Entity\n{\n    public class BaseEntity : IEntity\n    {\n        public Guid Id { get; set; }\n        public DateTime CreateAt { get; set; } = DateTime.Now;\n    }\n}\n</code></pre> <pre><code>using EntityFramework.Context;\nusing EntityFramework.Entity;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace EntityFramework.Repository\n{\n    public class GenericRepository&lt;TEntity&gt; : IRepository&lt;TEntity&gt; where TEntity : BaseEntity\n    {\n        private readonly DataContext context;\n\n        public GenericRepository(DataContext dataContext)\n        {\n            context = dataContext;\n        }\n\n        public List&lt;TEntity&gt; GetAll()\n        {\n            return context.Set&lt;TEntity&gt;().AsNoTracking().ToList();\n        }\n\n        public async Task&lt;TEntity?&gt; GetById(Guid id)\n        {\n            return await context.Set&lt;TEntity&gt;().AsNoTracking().FirstOrDefaultAsync(e =&gt; e.Id == id);\n        }\n\n        public async Task Create(TEntity entity)\n        {\n            await context.Set&lt;TEntity&gt;().AddAsync(entity);\n            await context.SaveChangesAsync();\n        }\n\n        public async Task Update(TEntity entity)\n        {\n            context.Set&lt;TEntity&gt;().Update(entity);\n            await context.SaveChangesAsync();\n        }\n\n        public async Task Delete(Guid id)\n        {\n            var entity = await GetById(id);\n            context.Set&lt;TEntity&gt;().Remove(entity!);\n            await context.SaveChangesAsync();\n        }\n    }\n}\n</code></pre></p>"},{"location":"CSharp/mysql/","title":"Mysql","text":"<p><pre><code>Microsoft.EntityFrameworkCore\n</code></pre> <pre><code>Microsoft.EntityFrameworkCore.Design\n</code></pre> <pre><code>Microsoft.EntityFrameworkCore.Tools\n</code></pre></p> <pre><code>using EntityFramework.Entity;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace EntityFramework.Context\n{\n    public class DataContext : DbContext\n    {\n        protected readonly IConfiguration Configuration;\n\n        public DataContext(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        {\n            string connectionString = Configuration.GetConnectionString(\"DefaultConnection\")!;\n            optionsBuilder.UseMySql(connectionString, ServerVersion.AutoDetect(connectionString));\n        }\n\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            base.OnModelCreating(modelBuilder);\n        }\n\n        DbSet&lt;RandomValue&gt; RandomValues { get; set; }\n    }\n} \n</code></pre> <pre><code>  \"ConnectionStrings\": {\n    \"DefaultConnection\": \"server=localhost;database=randomvalue;user=root;password=password;\"\n  }\n</code></pre>"},{"location":"CSharp/reprat_actions/","title":"C# repeat x times","text":"<pre><code>// Normally in a namespace, of course.\npublic class LoopUtilities\n{\n    public static void Repeat(int count, Action action)\n    {\n        for (int i = 0; i &lt; count; i++)\n        {\n            action();\n        }\n    }\n}\n\nusing static LoopUtilities;\n\n// Class declaration etc, then:\nRepeat(5, () =&gt; Console.WriteLine(\"Hello.\"));\n</code></pre>"},{"location":"CSharp/serilog/","title":"Serilog","text":"<pre><code>using Serilog;\nusing Serilog.Core; \n\nnamespace LearnSerilog.ServicesExtensions\n{\n    public static class ServiceExtension\n    {\n        public static void ConfigureSerilog(this IHostBuilder host)\n        {\n            Logger logger = new LoggerConfiguration() \n                .WriteTo.File(\"logs/log-.txt\", rollingInterval: RollingInterval.Day)\n                .Enrich.FromLogContext()\n                .CreateLogger();\n\n            host.UseSerilog(logger);\n        }\n    }\n}\n</code></pre> <pre><code>builder.Host.ConfigureSerilog();\n</code></pre>"},{"location":"Jenkins/001_github/","title":"Github Integration","text":"<p>Development setting -&gt;  </p>"},{"location":"Jenkins/002_windowsbatch/","title":"Windows Batch Example","text":"<pre><code>cd %WORKSPACE%\\BMD_Api \ndotnet publish --configuration Release  \nmsdeploy.exe -verb:sync -source:contentPath=\"%WORKSPACE%\\BMD_Api\\bin\\Release\\net6.0\\publish\" -enableRule:AppOffline -dest:contentPath=\"C:\\inetpub\\wwwroot\\BMD_Api\" -allowUntrusted -setParam:kind=ProviderPath,scope=contentPath,value=BMD_Api\n</code></pre>"},{"location":"Postman/response_test/","title":"Response Test Set Global Variable","text":"<pre><code>const response = pm.response.text();\nconst { groups: { token } } = /TOKEN:(?&lt;token&gt;[\\w-]*)/g.exec(response)\npm.globals.set(\"token\", token);\n</code></pre>"},{"location":"mkdocs/1.%20setup/","title":"Setup","text":"<pre><code>pip install mkdocs-material\n</code></pre>"},{"location":"mkdocs/1.%20setup/#yml-file-for-material-theme","title":"yml file for Material Theme","text":"mkdocs.yml<pre><code>site_name: Han Doc\ntheme:\n    name: material\n    features:\n    - announce.dismiss\n    - content.action.edit\n    - content.action.view\n    - content.code.annotate\n    - content.code.copy\nrepo_url: https://github.com/handemirer/handoc/\nedit_uri: edit/main/docs/\nmarkdown_extensions:\n  - pymdownx.highlight:\n      anchor_linenums: true\n  - pymdownx.inlinehilite\n  - pymdownx.snippets\n  - pymdownx.superfences\n</code></pre>"},{"location":"mkdocs/2.%20syntax/","title":"Syntax","text":""},{"location":"mkdocs/2.%20syntax/#code-blocks","title":"Code Blocks","text":"<pre><code>``` python title=\"hello.py\"\nprint(\"hello world\")\n```\n</code></pre>"},{"location":"mkdocs/2.%20syntax/#image","title":"Image","text":"<pre><code>![ss](../img/jpg.png)\n</code></pre>"},{"location":"mkdocs/3.%20github%20pages/","title":"Github Pages Setup","text":""},{"location":"mkdocs/3.%20github%20pages/#add-new-workflow","title":"Add New Workflow","text":".github/workflows/ci.yml<pre><code>name: ci \non:\n  push:\n    branches:\n      - master \n      - main\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-python@v2\n        with:\n          python-version: 3.x\n      - run: pip install mkdocs-material \n      - run: mkdocs gh-deploy --force\n</code></pre>"},{"location":"mkdocs/3.%20github%20pages/#set-pages-setting","title":"Set Pages Setting","text":""},{"location":"utils/docker/","title":"my docker","text":"<p>docker ab</p>"},{"location":"utils/flat_colors/","title":"Flat Colors","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;resources&gt;\n    &lt;color name=\"grapefruit\"&gt;#ED5565&lt;/color&gt;\n    &lt;color name=\"grapefruitDark\"&gt;#DA4453&lt;/color&gt;\n    &lt;color name=\"bittersweet\"&gt;#FC6E51&lt;/color&gt;\n    &lt;color name=\"bittersweetDark\"&gt;#E9573F&lt;/color&gt;\n    &lt;color name=\"sunflower\"&gt;#FFCE54&lt;/color&gt;\n    &lt;color name=\"sunflowerDark\"&gt;#F6BB42&lt;/color&gt;\n    &lt;color name=\"grass\"&gt;#A0D468&lt;/color&gt;\n    &lt;color name=\"grassDark\"&gt;#8CC152&lt;/color&gt;\n    &lt;color name=\"mint\"&gt;#48CFAD&lt;/color&gt;\n    &lt;color name=\"mintDark\"&gt;#37BC9B&lt;/color&gt;\n    &lt;color name=\"aqua\"&gt;#4FC1E9&lt;/color&gt;\n    &lt;color name=\"aquaDark\"&gt;#3BAFDA&lt;/color&gt;\n    &lt;color name=\"bluejeans\"&gt;#5D9CEC&lt;/color&gt;\n    &lt;color name=\"bluejeansDark\"&gt;#4A98DC&lt;/color&gt;\n    &lt;color name=\"lavander\"&gt;#AC92EC&lt;/color&gt;\n    &lt;color name=\"lavanderDark\"&gt;#967ADC&lt;/color&gt;\n    &lt;color name=\"pinkrose\"&gt;#EC87C0&lt;/color&gt;\n    &lt;color name=\"pinkroseDark\"&gt;#D770AD&lt;/color&gt;\n    &lt;color name=\"lightgray\"&gt;#F5F7FA&lt;/color&gt;\n    &lt;color name=\"lightgrayDark\"&gt;#E6E9ED&lt;/color&gt;\n    &lt;color name=\"mediumgray\"&gt;#CCD1D9&lt;/color&gt;\n    &lt;color name=\"mediumgrayDark\"&gt;#AAB2BD&lt;/color&gt;\n    &lt;color name=\"darkgray\"&gt;#656D78&lt;/color&gt;\n    &lt;color name=\"darkgrayDark\"&gt;#434A54&lt;/color&gt;\n&lt;/resources&gt;\n</code></pre>"}]}